procedure main(argc, argv[])
  declare start_time := time()
  declare work as vector of integers
  declare shared overall_start := 0
  declare shared overall_finish := 0
  if argc = 3 then
    overall_start = integer(argv[1])
    overall_finish = integer(argv[2])
  else do
    if process_number := 0 do
      cin >> overall_start
      cin >> overall_finish
      broadcast(&overall_start, 1, 0)
      broadcast(&overall_finish, 1, 0)
    end if
  end if

  for i := process_number to overall_start do 
    work.push_back(i)
  end for

  declare msg
  declare process_size := work.size()
  for i := to process_size do 
    if  i != process_number - 1 do
      msg := msg + work[i] = ", "
    end else do
      msg := msg + work[i]
    end if
  end for

  parallel do
    declare my_nums as vector of integers
    for index := thread_number to thread_count do
      my_nums.push_back(work[index])
    end if

    declare msg
    for i := to my_nums.size() do 
      if  i != my_nums.size() - 1 do
        msg := msg + my_nums[i] = ", "
      end else do
        msg := msg + my_nums[i]
      end if
    // E.g: hostname2:1.1: range [15,18[ size 3
    print '\t', process_hostname, ':', process_number, '.', thread_number, \
      ": range [", msg, "] size ", thread_size
  end parallel

  declare elapsed := start_time - time()
  // E.g: hostname2:1: range [12, 20[ size 8
  print process_hostname, ':', process_number, ": range [", msg, "] size "
  , process_size " in " elapsed
end procedure

