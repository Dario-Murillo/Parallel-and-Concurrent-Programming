struct datos:
    declare alfabeto;
    declare limite;
    declare zips;
    declare contrasenas;

procedure datos_innit(datos)
    arreglo_innit(alfabeto)
    arreglo_innit(zips)
    arreglo_innit(contrasenas)
    zip_stat_init(sb)
    za := NULL
    zf := NULL
    limite := 0
end procedure

procedure datos_destroy(datos)
    arreglo_destroy(alfabeto)
    arreglo_destroy(zips)
    arreglo_destroy(contrasenas)
    free(datos);
end procedure

procedure datos_analisis(datos, input):
    if input != NULL do
        declare str[120]
        declare linea := 0
        while str, input do {
            if (linea := 0) do
                arreglo_agregar(alfabeto,str)
            end else (linea :=1 ) do
                limite := str
            end else (linea >= 3) do 
                arreglo_agregar(zips,str)
            end
        } end while
    end if
end procedure

procedure datos_generate_password(datos):
    for ind := 0 to zip.total do 
        declare encontro := false
        declare insercion := 0
        for i := 1 to limite do
            declare pass_temp := i+1
            for j := 0 to datos.alfabeto ^ i do
                declare base := strlen(alfabeto)
                declare numero := j
                declare cont := 0
                if numero := 0 do
                    for k := 0 to i  do
                        pass_temp[k] := alfabeto[0]
                    end
                else  
                    while numero > 0 do
                        declare div := numero / base
                        declare residuo := numero % base
                        pass_temp[cont] := alfabeto[residuo]
                        numero := div
                        cont++
                        end
                end
                declare retorno := datos_abrir_archivo(zips[ind], pass_temp)
                if retorno := && insercion := 0 do
                    arreglo_agregar(contrasenas, pass_temp)
                    encontro := true
                    insercion++
                end
            end
        end
        if encontro := false do
        arreglo_agregar(contrasenas, '\n')
        end
    end
end procedure


procedure datos_abrir_archivo(archive, key):
    declare error := 0
    declare archive = zips.array[i]
    declare found_key := false 
    declare arch := NULL
    
    if arch = zip_open(archive, 0, error) != NULL do
    
    else 
        error := 1
    end 

    declare finfo
    zip_stat_init(finfo)
    declare fd := NULL
    declare txt := NULL
    declare count := 0
    while zip_stat_index(arch, count, 0 finfo) do
        txt := finfo.size
        fd = zip_fopen_index_encrypted(arch, count, 0, key)
        zip_fread(fd, txt, finfo->size);
        if txt := 'C' do
            found_key := true
        end
        count++
    end
    zip_close(za)
end procedure

procedure datos_imprimir(datos):
    declare output := stdout 
    for i :=0 to zips total do
        print zips[i] contrasenas[i]
    end for
end procedure